stages:
  - stage: Deploy
    displayName: Stage to Deploy
    variables:
      # Docker Container Registry information
      imageRepository: 'springpetclinic'
      containerRegistry: 'gsspringbootcr.azurecr.io'
      registryName: 'gsSpringBootCR'
      tag: '$(Build.BuildId)'

      azureSubscription: 'Azure subscription 1(4)(63e6a2d7-6014-442b-8af9-f1ca1ec71b0e)'

      # Docker information
      dockerUsername: gsSpringBootCR
      dockerPassword: 9Sb9L4www+ZPz9bdLEQpmO436X2tQ6TQJJXvvVHFG4+ACRCMHdtQ gsspringbootcr.azurecr.io
      dockerContainerName: spring-petclinic-app
    jobs:
      - job:
        displayName: Build
        steps:
        - task: Docker@2
          displayName: Build and push an image to Container Registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(Build.SourcesDirectory)/Dockerfile
            containerRegistry: $(containerRegistry)
            tags: |
              $(tag)
      - job: Deploy
        displayName: Deploy to App Service
        dependsOn: Build
        steps:
        - task: AzureWebAppContainer@1
          displayName: Deploy to Azure Web App for Containers
          inputs:
            azureSubscription: $(azureSubscription)
            appName: $(webAppName)
            containers: '$(imageRepository):$(tag)'
    # jobs:
    #   - deployment: VMDeploy
    #     displayName: Deploy to VM
    #     environment:
    #       name: ContosoDeploy
    #       resourceType: DESKTOP-BUGKGO7
    #       resourceName: virtualMachine
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - task: Bash@3
    #               inputs:
    #                 targetType: inline
    #                 script: |
    #                   docker login -u $(dockerUsername) -p $(dockerPassword)
    #                   images_list=$(docker images --filter reference=$(containerRegistry)/$(imageRepository):$(tag - 1))

    #                   # Check if docker container is existed
    #                   if docker ps -a | grep $(dockerContainerName); then
    #                     # Remove container
    #                     docker rm -f $(dockerContainerName)
    #                   fi
                      
    #                   # Check if docker image is existed
    #                   if [[ -n "$(images_list)" ]]; then
    #                     docker run --name $(dockerContainerName) -d $(containerRegistry)/$(imageRepository):$(tag - 1)
    #                   fi 
    #                   docker pull $(containerRegistry)/$(imageRepository):$(tag)
    #                   docker run --name $(dockerContainerName) -d $(containerRegistry)/$(imageRepository):$(tag)
    #             - task: Docker@2
    #               displayName: Login to Docker
    #               inputs:
    #                 command: login
    #                 containerRegistry: $(registryName)
    #             - task: Docker@2
    #               displayName: Start docker container
    #               inputs:
    #                 command: start
    #                 containerRegistry: $(registryName)
    #                 container: $(dockerContainerName)
    #             - task: AzureWebAppContainer@1
    #               displayName: Deploy to Azure Web App for Containers
    #               inputs:
    #                 azureSubscription: $(azureSubscription)
    #                 appName: '$(webAppName)'
    #                 containers: '$(imageRepository):$(tag)'
